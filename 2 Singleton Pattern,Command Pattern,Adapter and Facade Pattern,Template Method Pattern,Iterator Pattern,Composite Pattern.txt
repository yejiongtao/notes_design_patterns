1. Singleton Pattern
	ensures a class has only one instance, and provides a global point of access to it.
	in English
		static, so that the whole app shares the same one 
		always checking if it already exists before creating
		forbide clone()
	example
		public class SingletonObject
		{
			private static SingletonObject ref;

			private SingletonObject()
			{
				// some coded
			}

			public static synchronized SingletonObject getSingletonObject()		// note the synchronized
			{
				if (ref == null)
					// it's ok, we can call this constructor
					ref = new SingletonObject();		
				return ref;
			}

			public Object clone() throws CloneNotSupportedException
			{
				throw new CloneNotSupportedException(); 
				// that'll teach 'em
			}
		}
	synchronization is expensive
		and is only needed when ref==null, so if you really care about the overhead
			private static SingletoneObject ref = new SingletonObject();
			public static SingletonObject getSingletonObject(){
				return ref;
			}
		or
			private volatile static SingletonObject ref;	// note the volatile here!
				// means the value of this variable will never be cached thread-locally: all reads and writes will go straight to "main memory"
			public static SingletonObject getSingletonObject(){
				if(ref == null)
					synchronized(SingletonObject.class)
						if(ref == null)		// don't forget to check again
							ref = new SingletonObject();
				return ref;
			}

2. Command Pattern
	encapsulates a request as an object, thereby letting you parameterize other objects with different requests, queue or log requests, and support undoable operations
	it's pretty straight forward
		create an abstract class to represent a command, containing a execute() method
		extend it to implement concrete commands
		delegate the commands to certain invokers
		the invokers call the execute() appropriately
	you can queue the commands and delegate to threads
		in this way, a certain thread can perform different commands
	besides execute(), a command can have undo(), store(), and load()
		store() is to save the logging
		and load() is to load the logging and redo the command when system error occurs

3. Adapter Pattern
	converts the interface of a class into another interface the clients expect
		ets classes work together that couldn’t otherwise because of incompatible interfaces
	in English
		a client is expecting interface Target, and your Apdaptee does not have the interface required
		so you create an Adapter keeping an Adaptee via composition, to implement interface Target using Adaptee's methods
		(if you own the Adaptee, maybe you can just modify it to satisfy the Target interface)

4. Facade Pattern
	provides a unified interface to a set of interfaces in a subsystem
		defines a higher-level interface that makes the subsystem simpler and easier to use
	Principle of Least Knowledge: talk only to your immediate friends
		instead of c.getD().f()
			you create a f() in C, and then call c.f()
		in this way, you only depend on C

5. Template Method Pattern
	defines the skeleton of an algorithm in a method, deferring some steps to subclasses
		lets subclasses redefine certain steps of an algorithm without changing the algorithm’s structure.
	for example, in Android, the logic of life circle of a Activity is set
		but you can override those methods such as onCreate() to perform your own things

6. Iterator Pattern
	provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation
	so that you can write polymorphic code that works with any collections
		and method like getObjects() shouldn't exist, instead, you simply return an Iterator
	iterators in Java
		java.util.Iterator
			for any Collections, including array
		java.util.ListIterator
			for Lists
			allows goes backwards via previous()

7. Composite Pattern
	composes objects into tree structures to represent part-whole hierarchies
		Composite lets clients treat individual objects and compositions of objects uniformly
	in English
		an element of tree can be a composite (with children), or an individual (leaf)
			but all implements the same interface Component
			in this way, they can be treated uniformly
		since a composite and an individual may have different kind of behaviors
			so in my opinion, you should add two more interfaces, one for composites and one for indivisuals
		for those shared methods, you can make them behave recursively
			e.g. for draw(), every indivisual components draw themselves, and every composite components invoke all its children's draw()

	but sometimes you'll need an iterator to iterate across all elements in the tree
		class CompositeIterator implements Iterator{
			Stack<Iterator<Component>> mStack = new Stack<>();

			public CompositeIterator(Iterator iterator){	// the iterator of the top-level component
				mStack.push(iterator);
			}

			public Object next(){
				if(hasNext()){
					Iterator<Component> iterator = stack.peek;
					Component component = iterator.next();

					stack.push(component.createIterator());		// Component.createIterator() returns NullIterator is component is a leaf
											// which is a custom kind of Iterator, which returns null for next() and false for hasNext()
					return component;
				}else{
					return null;
				}
			}

			public boolean hasNext(){
				if(stack.empty()){
					return false;
				} else {
					Iterator<Component> iterator = stack.peek();
					if(!iterator.hasNext()){
						stack.pop();		// this level is empty, go back to the higher level
						return hasNext;
					} else {
						return true;
					}
				}
			}
		}
